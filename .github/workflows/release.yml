name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

jobs:
  build:
    name: Build and Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Build for all platforms
        run: |
          mkdir -p build/release
          for os in linux darwin windows; do
            for arch in amd64; do
              echo "Building for $os/$arch..."
              if [ "$os" = "windows" ]; then
                GOOS=$os GOARCH=$arch go build -ldflags="-X main.Version=${{ steps.get_version.outputs.VERSION }}" -o build/treew-$os-$arch.exe ./cmd/treew/main.go
              else
                GOOS=$os GOARCH=$arch go build -ldflags="-X main.Version=${{ steps.get_version.outputs.VERSION }}" -o build/treew-$os-$arch ./cmd/treew/main.go
              fi
            done
          done

      - name: Create release packages
        run: |
          for os in linux darwin windows; do
            for arch in amd64; do
              echo "Creating release package for $os/$arch..."
              mkdir -p build/release/treew-${{ steps.get_version.outputs.VERSION }}-$os-$arch
              
              if [ "$os" = "windows" ]; then
                cp build/treew-$os-$arch.exe build/release/treew-${{ steps.get_version.outputs.VERSION }}-$os-$arch/
                cp scripts/install.ps1 scripts/uninstall.ps1 build/release/treew-${{ steps.get_version.outputs.VERSION }}-$os-$arch/
              else
                cp build/treew-$os-$arch build/release/treew-${{ steps.get_version.outputs.VERSION }}-$os-$arch/
                cp scripts/install.sh scripts/uninstall.sh build/release/treew-${{ steps.get_version.outputs.VERSION }}-$os-$arch/
              fi
              
              cp README.md build/release/treew-${{ steps.get_version.outputs.VERSION }}-$os-$arch/
              
              if [ -f "LICENSE" ]; then
                cp LICENSE build/release/treew-${{ steps.get_version.outputs.VERSION }}-$os-$arch/
              fi
              
              if [ -f "CHANGELOG.md" ]; then
                cp CHANGELOG.md build/release/treew-${{ steps.get_version.outputs.VERSION }}-$os-$arch/
              fi
              
              cd build/release
              tar -czf treew-${{ steps.get_version.outputs.VERSION }}-$os-$arch.tar.gz treew-${{ steps.get_version.outputs.VERSION }}-$os-$arch
              cd ../..
            done
          done

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            build/release/treew-${{ steps.get_version.outputs.VERSION }}-linux-amd64.tar.gz
            build/release/treew-${{ steps.get_version.outputs.VERSION }}-darwin-amd64.tar.gz
            build/release/treew-${{ steps.get_version.outputs.VERSION }}-windows-amd64.tar.gz
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 